// КОМАНДЫ ПРОСМОТРА ИЗМЕНЕНИЙ ФАЙЛОВ //
git status		-просмотр состояния всех отслеживаемых файлов
git diff		-просмотр изменний всех файлов перед их добавлением к коммиту
git diff <file_name>	-просмотр изменний в файле перед его добавлению к коммиту
git log			-
git diff <first_commit(более ранний> <second_commit(более поздний> <file_name>	-просмотр изменеий файла в разных коммитах
git diff <first_commit(более ранний> <second_commit(более поздний>		-просмотр изменний всего проекта между указанными коммитами
*можно указывать к сравнению коммиты из разных веток. так как хэши у них разные, то гит поймет о чем его просят*
git diff <file_name1> <file_name2>	-просмотр изменнеий между двумя файлами ДАЖЕ ЕСЛИ ОНИ НЕ НИХОДЯТСЯ В РЕПОЗИТОРИИ А К ПРИМЕРУ НА РАБОЧЕМ СТОЛЕ
git blame <file_name>			-выводит подробный отчет об изменниях файла, когда и в каком коммите те или иные изменния


// РАБОТА С ФАЙЛОМ .gitignor //
== не рекомендуется хранить в гит репозитории ==
-> лог файлы (логи)
-> файлы, загруженные пользователем
-> слеужебные файлы сред разработки
-> внешние библиотеки
-> файлы локальной конфигурации
-> файлы операционной системы
-> очень большие файлы

errors.log		-эта запись в файле гитигнор означает что гит прекратит отслеживание данного файла
*.log			-добавление всех файлов с данным расширением в список исключения к отслеживанию
logs/			-добавление всех файлов в данной папке в список исключения к отслеживанию
logs/*.log		-все файлы с расширением лог в папке лог игнорировать
!logs/special.log	-исключить данный файл из игнорирования
====================
|logs/             |
|!logs/special.log |	-данная запись работать не будет потому что указаны все  файлы к 
|		   |	игнорированию
====================


//ОТМЕНА НЕСОХРАНЕННЫХ ИЗМЕНЕНИЙ//
git restore <file>		-отмена изменений файла
git restore --staged <file>	-отменяет индексацию (откат git add) если файл был уже добавлен в индекс (git add) после чего нужно выполлнить git restore <file>
git reset --hard		-откат всех незакомиченных изменений всех файлов
*файлы неотслеживаемые не откатывает
git clean -f			-очистка от всех неотслеживаемых файлов

git rm --cached errors.log	-в случае если вы добавили файл в коммит, запушили и только потом поняли что хотите добавить его в гит игнор, то используйте данную команду


//ОТМЕНА СОХРАНЁННЫХ ИЗМЕНЕНИЙ В КОММИТАХ//
git checkout 42hj2h4 <file>	-файл будет возвращен к состоянию в указанном коммите
git restore --staged <file>	-отменяет индексацию (откат git add) если файл был уже добавлен в индекс (git add)
git restore <file>		-отмена изменений файла
git revert 32h4jk4hk2		-отмена коммита после чего предлагается ввести сообщение для коммита
				УЧТИТЕ! что будут отменны изменения только данного коммита, а это значит что изменения последующих коммитов будут присутствовать
git rvert --abort		-отмена revert
git revert --no-commit g42hg3j	-отмена последенего коммита (последовательная отмена коммитов)


//УДАЛЕНИЕ (сброс) КОММИТОВ//
есть 3 режима
-soft
-hard
-mixed

git reset --soft hj234h		-сброс изменний до  указанного коммита
git reset h3j5kh		-отмена изменений с отменой индексации (reset --mixed) то есть после этого придется сделать коммит
git reset --hard 4h2kjh		-указанный коммит становиться последним, все предыдущие удаляются
git commit --amend -m 'new comment'	-для изменеия комментария коммита
===================
= изменение последнего коммита =
git add .
git commit -m 'comment'
добавляем/удаляем файл 
git commit --amend --no-edit	-не хотим редактировать сообщение коммита


//ОТМЕНА СЛИЯНИЯ ВЕТОК//
git reset --merge 424hkj24	-откатываемся до указанного коммита после слияния веток
git merge --abort		-в случае  конфликта мы отменяем мердж


//ОТКЛАДЫВАЕНИЕ ИЗМЕНЕНИЙ//
git stash		-отложить изменния в данной ветке, гит назначет хэш
**гит прячет все изменения файлов до последнего коммита
git stash pop		-гит возвращает все изменения файловкоторые были спрятаны
git stash list		-вывод списка всех отложенных изменений
git stash drop		-удаление отложенного изменения


//ПЕРМЕЩЕНИЕ ИЗМЕНЕНИЙ//
git rebase <new_branch>	-new_branch вливаете в текущую ветку
git cherry-pick 2hj42hk	-переносим указанный коммит в текущую ветку




